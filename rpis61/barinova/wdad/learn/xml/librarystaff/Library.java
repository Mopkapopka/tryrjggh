package rpis61.barinova.wdad.learn.xml.librarystaff;//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.01.09 at 08:29:37 PM SAMT 
//


import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
        "readers"
})
@XmlRootElement(name = "library")
public class Library  implements Serializable {

    protected List<Reader> readers;

    /**
     * Gets the value of the reader property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reader property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReader().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Reader }
     *
     *
     */
    public List<Reader> getReader() {
        if (readers == null) {
            readers = new ArrayList<>();
        }
        return this.readers;
    }

    public Library(){
        readers = new ArrayList<>();
    }

    public void openLibraryCard(Reader reader){
        if (readers == null) readers = new ArrayList<>();
        readers.add(reader);
        reader.setId(readers.indexOf(reader));
    }

    public  int readersAmount () {
        if (readers==null){
            System.out.println("readers list is empty!");
            return 0;
        }
        return readers.size();
    }

    public Reader getReader(int i){
        return readers.get(i);
    }

    public Reader getReader(String firstName, String secondName){
        for (Reader r: readers) {
            if (r.getFirstname().equals(firstName) && r.getSecondname().equals(secondName)) return r;
        }
        return null;
    }

    public boolean isDebtor (rpis61.barinova.wdad.learn.xml.librarystaff.Reader r) {
        return  r.isDebtor();
    }

}
